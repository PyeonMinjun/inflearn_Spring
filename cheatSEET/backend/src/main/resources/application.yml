spring:
  application:
    name: loveledger
  security:
    oauth2:
      client:
        registration:
          google:
            client-name: google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}  # 여기에 client secret 입력
            redirect-uri: ${GOOGLE_REDIRECT_URI}
            authorization-grant-type: authorization_code
            scope:
              - profile
              - email
  jwt:
    secret: ${SECRET_JWT}

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DATABASE_URL}
    username: ${DATABASE_NAME}
    password: ${DATABASE_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update

      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy

  open-ai:
    key: ${OPENAI_API_KEY}
  gemini-ai:
    key: ${GEMINI_AI_KEY}
    backend-url: ${GEMINI_BACKEND_URL}

cloud:
  aws:
    credentials:
      accessKey: ${S3_ACCESS_KEY}
      secretKey: ${S3_SECRET_KEY}
    s3:
      bucket: ${UPLOAD_IMAGE_BUCKET}
    region:
      static: ${IMAGE_BUCKET_REGION}
    stack:
      auto: false

ssafy:
  url: ${SSAFY_NETWORK_URL}
  apiKey: ${SSAFY_NETWORK_APIKEY}

app:
  base-url: ${BASE_URL}
  deep-link-uri-scheme: ${DEEPLINK_URL}
  invite-expiry-hours: ${INVITE_EXPIRE_HOURS}
  android-package-name: ${ANDROID_PACKAGE_NAME}

android:
  oauth2:
    google:
      package-name: ${ANDROID_PACKAGE_NAME}  # AndroidManifest.xml에서 확인한 패키지 이름
      sha1-certificate-fingerprint: ${ANDROID_SHA1_FINGERPRINT}  # keytool로 얻은 SHA-1 지문
      custom-scheme: ${ANDROID_CUSTOM_SCHEME}  # 앱의 커스텀 URL 스킴 (예: loveledger://)